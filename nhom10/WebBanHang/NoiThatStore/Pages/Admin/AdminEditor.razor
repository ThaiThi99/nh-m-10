@page "/admin/DsAdmins/edit/{id:long}"
@page "/admin/DsAdmins/create"
@inherits OwningComponentBase<IStoreRepository>
<style>
	div.validation-message {
		color: rgb(220, 53, 69);
		font-weight: 500
	}
</style>
<h3 class="bg-@ThemeColor text-white text-center p-1">
	@TitleText a Admin
</h3>
<EditForm Model="Admin" OnValidSubmit="SaveAdmin">
	<DataAnnotationsValidator />
	@if (Admin.ADMINID.HasValue && Admin.ADMINID.Value != 0)
	{
		<div class="form-group">
			<label>ID</label>
			<input class="form-control" disabled
				   value="@Admin.ADMINID" />
		</div>
	}
	<div class="form-group">
		<label>TENSP</label>
		<ValidationMessage For="@(() => Admin.TEN_TK)" />
		<InputText class="form-control" @bind-Value="Admin.TEN_TK" />
	</div>
	@* ... adding element *@
</EditForm>
<EditForm Model="Admin" OnValidSubmit="SaveAdmin">
	<DataAnnotationsValidator />
	<div class="form-group">
		<label>PASS</label>
		<ValidationMessage For="@(() => Admin.PASS)" />
		<InputText class="form-control"
		@bind-Value="Admin.PASS" />
	</div>
	
	<div class="mt-2">
		<button type="submit" class="btn btn-@ThemeColor">Save</button>
		<NavLink class="btn btn-secondary" href="/admin/Admins">
			Cancel
		</NavLink>
	</div>
</EditForm>
@code {
	public IStoreRepository Repository => Service;
	[Inject]
	public NavigationManager? NavManager { get; set; }
	[Parameter]
	public long Id { get; set; } = 0;
	public Admin Admin { get; set; } = new Admin();
	protected override void OnParametersSet()
	{
		if (Id != null)
		{
			Admin = Repository.Admins.FirstOrDefault(p => p.ADMINID == Id) ?? new();
		}
	}
	public void SaveAdmin()
	{
		if (Id == 0)
		{
			Repository.CreateAdmin(Admin);
		}
		else
		{
			Repository.SaveAdmin(Admin);
		}
		NavManager?.NavigateTo("/admin/DsAdmins");
	}
	public string ThemeColor => Id == 0 ? "primary" : "warning";
	public string TitleText => Id == 0 ? "Create" : "Edit";
}
