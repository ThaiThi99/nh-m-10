@page "/admin/sanphams"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>
<table class="table table-sm table-striped table-bordered">
<thead>
<tr>
<th>ID</th><th>Name</th>
<th>Category</th><th>Price</th><td/>
</tr>
</thead>
<tbody>
@if (SanPhamData?.Count() > 0) {
@foreach (SanPham p in SanPhamData) {
<tr>
					<td>@p.MASP</td>
					<td>@p.TENSP</td>
					<td>@p.LOAI</td>
					<td>@p.GiaBan.ToString("c")</td> 
<td>
<NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(p.MASP ?? 0)">
Details
</NavLink>
						<NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(p.MASP ?? 0)">
Edit
</NavLink>
						<button class="btn btn-danger btn-sm" @onclick="@(e => DeleteSanPham(p))">
							Delete
</button>
</td>
</tr>
}
		}
		else
		{
			<tr>
				<td colspan="5" class="text-center">No SanPhams</td>
			</tr>
		}
	</tbody>
</table>
<NavLink class="btn btn-primary" href="/admin/SanPhams/create">Create</NavLink>
@code {
	public IStoreRepository Repository => Service;
	public IEnumerable<SanPham> SanPhamData { get; set; } = Enumerable.Empty<SanPham>();
	protected async override Task OnInitializedAsync()
	{
		await UpdateData();
	}
	public async Task UpdateData()
	{
		SanPhamData = await Repository.SanPhams.ToListAsync();
	}
	public async Task DeleteSanPham(SanPham p)
	{
		Repository.DeleteSanPham(p);
		await UpdateData();
	}
	public string GetDetailsUrl(long id) => $"/admin/SanPhams/details/{id}";
	public string GetEditUrl(long id) => $"/admin/SanPhams/edit/{id}";
}
